<Project DefaultTargets="Restore;Build">
  <Import Project="build\Xamarin.Build\Xamarin.Build.targets"/>
  <Import Project="build\Metadata.targets"/>
  <Import Project="build\Clean.targets"/>

  <Import
    Condition="Exists('_build\Configure.g.props')"
    Project="_build\Configure.g.props"/>

  <PropertyGroup>
    <IsDotNetCoreMSBuild>false</IsDotNetCoreMSBuild>
    <IsDotNetCoreMSBuild Condition="'$(MSBuildRuntimeType)' == 'Core'">true</IsDotNetCoreMSBuild>
  </PropertyGroup>

  <Target Name="CheckConfigure">
    <PropertyGroup>
      <Driver>msbuild</Driver>
      <Driver Condition="$(IsDotNetCoreMSBuild)">dotnet msbuild</Driver>
    </PropertyGroup>
    <Error
      Condition="!Exists('_build\Configure.g.props')"
      Text="You must first configure the build using '$(Driver) build/Configure.proj'."/>
  </Target>

  <!-- Profiles -->

  <Target
    Name="WebProfile"
    DependsOnTargets="CoreProfile;WorkbookAppsProfile">
    <ItemGroup>
      <ProjectsToBuild Include="Clients\Xamarin.Interactive.Client.Web\*.csproj">
        <HasPackageTarget>true</HasPackageTarget>
      </ProjectsToBuild>
    </ItemGroup>
  </Target>

  <Target
    Name="ConsoleProfile"
    DependsOnTargets="CoreProfile;WorkbookAppsProfile">
    <ItemGroup>
      <ProjectsToBuild Include="Clients\Xamarin.Interactive.Client.Console\*.csproj"/>
    </ItemGroup>
  </Target>

  <Target
    Name="DesktopProfile"
    Condition="!$(IsDotNetCoreMSBuild)"
    DependsOnTargets="CoreProfile;WorkbookAppsProfile">
    <ItemGroup>
      <ProjectsToBuild
        Condition="$(IsMac)"
        Include="Clients\Xamarin.Interactive.Client.Mac\*.csproj">
        <HasPackageTarget>true</HasPackageTarget>
      </ProjectsToBuild>
      <ProjectsToBuild
        Condition="$(IsWindows)"
        Include="Clients\Xamarin.Interactive.Client.Windows\*.csproj">
        <HasPackageTarget>true</HasPackageTarget>
      </ProjectsToBuild>
      <ProjectsToBuild
        Condition="$(IsWindows)"
        Include="Tools\InstallerVerifier\*.csproj"/>
      <ProjectsToBuild
        Include="Tests\Xamarin.Interactive.Tests\*.csproj" />
      <ProjectsToBuild
        Condition="$(IsMac)"
        Include="Tests\Xamarin.Interactive.Tests.InspectorSupport.Mac\*.csproj"/>
    </ItemGroup>
  </Target>

  <Target
    Name="CoreProfile">
    <ItemGroup>
      <ProjectsToBuild Include="Agents\Xamarin.Interactive\*.csproj">
        <HasPublicApi>true</HasPublicApi>
      </ProjectsToBuild>
      <ProjectsToBuild Include="CodeAnalysis\Xamarin.Interactive.CodeAnalysis\*.csproj">
        <HasPublicApi>true</HasPublicApi>
      </ProjectsToBuild>
      <ProjectsToBuild Include="CodeAnalysis\Xamarin.Interactive.CodeAnalysis.Tests\*.csproj">
        <HasXunitTests>true</HasXunitTests>
      </ProjectsToBuild>
      <ProjectsToBuild Include="CodeAnalysis\Xamarin.Interactive.CodeAnalysis.Roslyn\*.csproj"/>
      <ProjectsToBuild Include="CodeAnalysis\Xamarin.Interactive.CodeAnalysis.Roslyn.Tests\*.csproj">
        <HasXunitTests>true</HasXunitTests>
      </ProjectsToBuild>
      <ProjectsToBuild Include="Clients\Xamarin.Interactive.Client\*.csproj">
        <HasPublicApi>true</HasPublicApi>
      </ProjectsToBuild>
    </ItemGroup>
  </Target>

  <PropertyGroup>
    <WorkbookAppsProfileDependsOnTargets>
      CoreProfile;
      DotNetCoreWorkbookAppsProfile;
      DesktopWorkbookAppsProfile;
      XamarinAndroidWorkbookAppsProfile;
      XamarinIosWorkbookAppsProfile;
      XamarinMacWorkbookAppsProfile
    </WorkbookAppsProfileDependsOnTargets>
  </PropertyGroup>

  <Target
    Name="WorkbookAppsProfile"
    DependsOnTargets="$(WorkbookAppsProfileDependsOnTargets)"/>

  <Target
    Name="DotNetCoreWorkbookAppsProfile">
    <ItemGroup>
      <ProjectsToBuild Include="WorkbookApps\Xamarin.Workbooks.DotNetCore\*.csproj"/>
    </ItemGroup>
  </Target>

  <Target
    Name="DesktopWorkbookAppsProfile"
    Condition="!$(IsDotNetCoreMSBuild)">
    <ItemGroup>
      <ProjectsToBuild
        Condition="$(IsWindows) Or $(HaveMono)"
        Include="Agents\Xamarin.Interactive.Console\*.csproj"/>
      <ProjectsToBuild
        Condition="$(IsWindows)"
        Include="WorkbookApps\Xamarin.Workbooks.Wpf\*.csproj"/>
    </ItemGroup>
  </Target>

  <Target
    Name="XamarinAndroidWorkbookAppsProfile"
    Condition="!$(IsDotNetCoreMSBuild) And $(HaveXamarinAndroid)">
    <ItemGroup>
      <ProjectsToBuild Include="WorkbookApps\Xamarin.Workbooks.Android\*.csproj"/>
      <ProjectsToBuild Include="Agents\Xamarin.Interactive.Android.ActivityTrackerShim\*.csproj"/>
      <ProjectsToBuild Include="Agents\Xamarin.Interactive.Forms.Android\*.csproj"/>
      <ProjectsToBuild
        Condition="Exists($(ProprietaryDirectory))"
        Include="$(ProprietaryDirectory)ClientIntegrations\Xamarin.Workbooks.Client.Android\*.csproj"/>
    </ItemGroup>
  </Target>

  <Target
    Name="XamarinIosWorkbookAppsProfile"
    Condition="!$(IsDotNetCoreMSBuild) And $(HaveXamarinIos)">
    <ItemGroup>
      <ProjectsToBuild Include="WorkbookApps\Xamarin.Workbooks.iOS\*.csproj">
        <Platform>iPhoneSimulator</Platform>
      </ProjectsToBuild>
      <ProjectsToBuild Include="Agents\Xamarin.Interactive.Forms.iOS\*.csproj"/>
      <ProjectsToBuild
        Condition="$(IsWindows)"
        Include="Clients\Xamarin.Interactive.Client.Mac.SimChecker\*.csproj"/>
      <ProjectsToBuild
        Condition="$(IsWindows)"
        Include="ClientIntegrations\Xamarin.Workbooks.Client.iOS\*.csproj"/>
    </ItemGroup>
  </Target>

  <Target
    Name="XamarinMacWorkbookAppsProfile"
    Condition="!$(IsDotNetCoreMSBuild) And $(HaveXamarinMac)">
    <ItemGroup>
      <ProjectsToBuild Include="WorkbookApps\Xamarin.Workbooks.Mac\*.csproj"/>
    </ItemGroup>
  </Target>

  <!-- Solution Targets -->

  <Target
    Name="Build"
    DependsOnTargets="CheckConfigure;@(ProfileTargets)">
    <MSBuild
      Projects="$(SolutionFile)"
      Properties="$(ProfileProperties)"
      Targets="Build"/>
  </Target>

  <Target
    Name="Restore"
    DependsOnTargets="CheckConfigure;@(ProfileTargets)">
    <Message Importance="High" Text="Restoring NuGet packages for $(SolutionFileRelative)..."/>
    <MSBuild
      Projects="$(SolutionFile)"
      Properties="$(ProfileProperties)"
      Targets="Restore"/>
  </Target>

  <!-- Profile Targets -->

  <Target
    Name="Package"
    DependsOnTargets="CheckConfigure;@(ProfileTargets)">
    <ItemGroup>
      <PackageProjectsToBuild
        Include="@(ProjectsToBuild)"
        Condition="'%(ProjectsToBuild.HasPackageTarget)' != ''"/>
    </ItemGroup>
    <MSBuild
      Projects="@(PackageProjectsToBuild)"
      Properties="$(ProfileProperties);WorkbookAppsBasePath="
      Targets="Package"/>
  </Target>

  <Target
    Name="Test"
    DependsOnTargets="CheckConfigure;@(ProfileTargets)">
    <ItemGroup>
      <ProjectsToTest
        Include="@(ProjectsToBuild)"
        Condition="'%(ProjectsToBuild.HasXunitTests)' != ''"/>
    </ItemGroup>
    <Message Importance="High" Text="Selected xUnit Tests:"/>
    <Message Importance="High" Text="  %(ProjectsToTest.Filename)"/>
    <Exec
      WorkingDirectory="%(ProjectsToTest.RootDir)%(ProjectsToTest.Directory)"
      Command="dotnet xunit -nocolor -nobuild -c $(Configuration) -xml %(ProjectsToTest.Filename).xml"/>
  </Target>

  <!-- Configuration / Solution Generation -->

  <Target
    Name="ConfigurationSummary"
    AfterTargets="ComputeSolution">
    <Message Importance="High" Text="%(ConfigurationSummary.Identity)"/>
    <Message Importance="High" Text="Projects To Build:"/>
    <Message Importance="High" Text="  %(ProjectsToBuild.Filename)"/>
  </Target>

  <Target
    Name="ComputeSolution">
    <PropertyGroup>
      <SolutionFile>$(MSBuildThisFileDirectory)solutions\Xamarin.Interactive.sln</SolutionFile>
      <SolutionFileRelative>$([MSBuild]::MakeRelative($(MSBuildThisFileDirectory), $(SolutionFile)))</SolutionFileRelative>
      <SolutionBasePath>$([System.IO.Path]::GetDirectoryName($(SolutionFile)))\</SolutionBasePath>
    </PropertyGroup>
  </Target>

  <Target
    Name="GenerateSolution"
    DependsOnTargets="ComputeSolution"
    BeforeTargets="Restore;Build">
    <Message Importance="High" Text="Generating $(SolutionFileRelative)..."/>
    <GenerateSolution
      ProjectsRelativeToPath="$(MSBuildThisFile)"
      Projects="@(ProjectsToBuild)"
      SolutionConfiguration="$(Configuration)"
      GlobalSectionsFiles="$(SolutionBasePath)GlobalSections"
      OutputFile="$(SolutionFile)"/>
  </Target>

  <!-- Utility Targets -->

  <Target
    Name="UpdatePublicApiDefinitions"
    DependsOnTargets="@(ProfileTargets)">
    <PropertyGroup>
      <ApiConfiguration>Release</ApiConfiguration>
    </PropertyGroup>
    <ItemGroup>
      <PublicApiProjectsToBuild
        Include="@(ProjectsToBuild)"
        Condition="'%(ProjectsToBuild.HasPublicApi)' != ''"/>
    </ItemGroup>
    <MakeDir Directories="docs"/>
    <MSBuild
      Projects="Tools\ApiDump\ApiDump.csproj;@(PublicApiProjectsToBuild)"
      Properties="Configuration=$(ApiConfiguration)"
      Targets="Build"/>
    <Message Importance="High" Text="Tools\ApiDump\ApiDump.csproj;@(PublicApiProjectsToBuild)"/>
    <ItemGroup>
      <PublicApiAssembly Include="%(PublicApiProjectsToBuild.RelativeDir)bin\$(ApiConfiguration)\*\%(Filename).dll">
        <ApiFile>docs\%(Filename).api.cs</ApiFile>
      </PublicApiAssembly>
    </ItemGroup>
    <Exec Command="Tools\ApiDump\ApiDump.exe %(PublicApiAssembly.FullPath) -o %(PublicApiAssembly.ApiFile)"/>
  </Target>

  <Target
    Name="TestDesktop"
    Condition="!$(IsDotNetCoreMSBuild) And $(SkipDesktopTests) == ''"
    AfterTargets="Test">
    <PropertyGroup>
      <TestDriver Condition="$(IsMac)">Clients\Xamarin.Interactive.Client.Mac\bin\$(Configuration)\Xamarin Workbooks.app\Contents\MacOS\Xamarin Workbooks</TestDriver>
      <TestDriver Condition="$(IsWindows)">Clients\Xamarin.Interactive.Client.Windows\bin\$(Configuration)\Workbooks\Xamarin Workbooks.exe</TestDriver>
      <TestAssembly>Tests\Xamarin.Interactive.Tests\bin\$(Configuration)\net461\Xamarin.Interactive.Tests.dll</TestAssembly>
      <TestCommand Condition="'$(TestToRun)' != ''">-test:$(TestToRun)</TestCommand>
    </PropertyGroup>
    <Error
      Condition="!Exists($(TestDriver))"
      Text="Desktop test driver does not exist: $(TestDriver)"/>
    <Error
      Condition="!Exists($(TestAssembly))"
      Text="Desktop test assembly does not exist: $(TestAssembly)"/>
    <Exec Command="&quot;$(TestDriver)&quot; cli test $(TestAssembly) &quot;-result:$(TopDirectory)Tests/Regressions.$(Configuration).xml&quot; $(TestCommand)"/>
  </Target>

  <Target
    Name="TestInspectorInjector"
    Condition="$(IsMac)">
    <Exec Command="Tests/Xamarin.Interactive.Tests.InspectorSupport.Mac/bin/$(Configuration)/Xamarin.Interactive.Tests.InspectorSupport.Mac.app/Contents/MacOS/Xamarin.Interactive.Tests.InspectorSupport.Mac"/>
  </Target>

  <Target
    Name="ArchiveSymbolFiles"
    DependsOnTargets="Xamarin_Build_ReadAllProperties">
    <PropertyGroup>
      <SymbolFilesArchive>$(ArtifactsBasePath)XamarinInteractive-$(ReleaseVersion_SemVer).$(RuntimeIdentifierPlatformBase).symbols.zip</SymbolFilesArchive>
    </PropertyGroup>
    <ItemGroup>
      <SymbolFilesToArchive Include="Agents\**\bin\$(Configuration)\**\*.pdb" />
      <SymbolFilesToArchive Include="Clients\**\bin\$(Configuration)\**\*.pdb" />
      <SymbolFilesToArchive Include="WorkbookApps\**\bin\$(Configuration)\*.pdb" />
    </ItemGroup>

    <MakeDir Directories="$([System.IO.Path]::GetDirectoryName($(SymbolFilesArchive)))"/>

    <Message Text="Archiving symbol files to &quot;$(SymbolFilesArchive)&quot;."/>
    <ZipArchive
      SourceFiles="@(SymbolFilesToArchive)"
      DestinationArchiveFileName="$(SymbolFilesArchive)"/>
  </Target>

</Project>