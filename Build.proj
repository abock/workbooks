<Project
  xmlns="http://schemas.microsoft.com/developer/msbuild/2003"
  DefaultTargets="Build"
  ToolsVersion="12.0">
  <Import Project="$(MSBuildThisFileDirectory)Build\Xamarin.Build\Xamarin.Build.targets"/>
  <Import Project="$(MSBuildThisFileDirectory)Build\Metadata.targets"/>
  <Import Project="$(MSBuildThisFileDirectory)Build\Utility.targets"/>
  <Import
    Project="$(MSBuildThisFileDirectory)workbooks-proprietary\provisionator.targets"
    Condition="Exists('$(MSBuildThisFileDirectory)workbooks-proprietary\provisionator.targets')"/>
  <Import
    Project="$(MSBuildThisFileDirectory)Build\Local.props"
    Condition="Exists('$(MSBuildThisFileDirectory)Build\Local.props')"/>

  <PropertyGroup>
    <SolutionPlatform Condition="'$(OS)' == 'Windows_NT'">Windows</SolutionPlatform>
    <SolutionPlatform Condition="'$(OS)' == 'Unix'">macOS</SolutionPlatform>
    <Provisionator_ArtifactCachePath Condition="'$(Provisionator_ArtifactCachePath)' == ''">$(MSBuildThisFileDirectory)</Provisionator_ArtifactCachePath>
  </PropertyGroup>

  <!-- External Tools -->
  <PropertyGroup Condition="'$(SolutionPlatform)' == 'Windows'">
    <WrenchAdb>C:\Users\builder\AppData\Local\Android\android-sdk\platform-tools\adb.exe</WrenchAdb>
    <SevenZip>C:\Program Files\7-zip\7z.exe</SevenZip>
  </PropertyGroup>
  <PropertyGroup Condition="'$(SolutionPlatform)' == 'macOS'">
    <CILStrip>/Library/Frameworks/Mono.framework/Versions/Current/Commands/mono-cil-strip</CILStrip>
  </PropertyGroup>

  <ItemGroup>
    <WhichSearchPath Include="$(MSBuildThisFileDirectory)"/>
    <WhichSearchPath Include="$(Provisionator_ArtifactCachePath)"/>
  </ItemGroup>

  <!-- General Configuration -->
  <PropertyGroup>
    <SolutionToBuild>Xamarin.Interactive.sln</SolutionToBuild>
    <SolutionProperties>$(SolutionProperties);Platform=$(SolutionPlatform)</SolutionProperties>
    <Configuration Condition="'$(Configuration)' == ''">Debug</Configuration>
    <MSBuildCommonProperties>
      $(MSBuildCommonProperties);
      Configuration=$(Configuration)
    </MSBuildCommonProperties>

    <PackageOutputDir Condition="'$(PackageOutputDir)' == ''">_artifacts\</PackageOutputDir>
    <InspectorNuGetPackageBuildDir>_inspectorPackage</InspectorNuGetPackageBuildDir>
    <InspectorNuGetPackageContentDir>$(InspectorNuGetPackageBuildDir)\contentFiles\any\any\</InspectorNuGetPackageContentDir>

    <BuildInfoDistFile>Package/buildinfo</BuildInfoDistFile>
  </PropertyGroup>

  <!-- Platform Specific Configuration -->
  <PropertyGroup Condition="'$(SolutionPlatform)' == 'Windows'">
    <UpdateInfoFile>Package\Windows\updateinfo</UpdateInfoFile>
    <InspectorOutputPathSuffix>InspectorExe</InspectorOutputPathSuffix>
    <InspectorPackageName>Xamarin.Inspector.Windows</InspectorPackageName>
    <InspectorPackageNuspec>Package\Windows\$(InspectorPackageName).nuspec</InspectorPackageNuspec>
  </PropertyGroup>
  <PropertyGroup Condition="'$(SolutionPlatform)' == 'macOS'">
    <UpdateInfoFile>Clients\Xamarin.Interactive.Client.Mac\PackageAssets\updateinfo</UpdateInfoFile>
    <InspectorPackageName>Xamarin.Inspector.Mac</InspectorPackageName>
    <InspectorPackageNuspec>Clients\Xamarin.Interactive.Client.Mac\PackageAssets\$(InspectorPackageName).nuspec</InspectorPackageNuspec>
    <InspectorAppBundleName>Xamarin Inspector.app</InspectorAppBundleName>
    <InspectorClientInstallPath>Clients\Xamarin.Interactive.Client.Mac\_install\Library\Frameworks\Xamarin.Interactive.framework\Versions\Current\InspectorClient\</InspectorClientInstallPath>
  </PropertyGroup>

  <!-- XVS mac build host configuration (in VSTS) -->
  <PropertyGroup Condition="'$(TF_BUILD)' == 'True'">
    <MacBuildHostAddress Condition="'$(AGENT_NAME)' == 'RE Cambridge Windows-Inspector-1'">bockover-1.guest.corp.microsoft.com</MacBuildHostAddress>
    <MacBuildHostAddress Condition="'$(AGENT_NAME)' == 'Cambridge Windows-Inspector-2'">inspector-1.guest.corp.microsoft.com</MacBuildHostAddress>
    <MacBuildHostUser>builder</MacBuildHostUser>
  </PropertyGroup>

  <PropertyGroup>
    <WorkbooksIntegrationNuGetPackageVersion>1.0.0-rc6</WorkbooksIntegrationNuGetPackageVersion>
  </PropertyGroup>

  <Target Name="BuildAndTest">
    <MSBuild
      Projects="$(MSBuildProjectFile)"
      Targets="UpdateBuildInfo;Build;Package;TestRegressions"
      Properties="Configuration=Release"/>
    <Message Text="Congratulations! Here's an ounce of confidence in your pull request!" Importance="high"/>
  </Target>

  <Target Name="_ResolveToolPaths">
    <Which
      Condition="!Exists('$(NuGet)')"
      Program="nuget"
      PreferPaths="@(WhichSearchPath)">
      <Output TaskParameter="FullPath" PropertyName="NuGet"/>
    </Which>
  </Target>

  <Target Name="ProvisioningCheck">
    <CallTarget
      Condition=" '$(Provisionator)' != '' "
      Targets="_ProvisioningCheck"/>
  </Target>

  <Target Name="_Bootstrap" DependsOnTargets="
    ProvisioningCheck;
    Xamarin_Build_ReadAllProperties;
    _ResolveToolPaths"/>

  <!-- Build and Clean use the same _Build* targets since the only difference is the Target passed to each csproj/sln.
       We use MSBuild instead of CallTarget as an easy way to pass along said Target. Also, Rebuild requires calling
       _Build* targets twice, and CallTarget does not allow that. -->
  <Target Name="Build" DependsOnTargets="_Bootstrap;UpdateInvertedDependencies">
    <MSBuild
      Condition="'$(SolutionPlatform)' == 'macOS'"
      Projects="$(MSBuildProjectFile)"
      Targets="_BuildMac;_BuildProprietary"
      Properties="InteractiveBuildTarget=Build"/>
    <MSBuild
      Projects="$(MSBuildProjectFile)"
      Targets="_BuildWin;_BuildProprietary;GenerateSignFiles;_KillWrenchAdbServer"
      RunEachTargetSeparately="true"
      Properties="InteractiveBuildTarget=Build"
      Condition="'$(SolutionPlatform)' == 'Windows'"/>
    <MSBuild
      Condition="'$(SolutionPlatform)' == 'macOS'"
      Projects="CoreBuild.proj"
      Targets="Package"
      Properties="Configuration=$(Configuration)"/>
  </Target>

  <Target Name="Clean">
    <MSBuild Condition="'$(SolutionPlatform)' == 'macOS'"
      Projects="$(MSBuildProjectFile)"
      Targets="_BuildMac"
      Properties="InteractiveBuildTarget=Clean"/>
    <MSBuild Condition="'$(SolutionPlatform)' == 'Windows'"
      Projects="$(MSBuildProjectFile)"
      Targets="_BuildWin"
      Properties="InteractiveBuildTarget=Clean" />
  </Target>

  <Target Name="_BuildMac">
    <Exec Command="xcrun -k"/>
    <MSBuild
      BuildInParallel="true"
      Projects="$(SolutionToBuild)"
      Properties="$(SolutionProperties);$(MSBuildCommonProperties)"
      Targets="$(InteractiveBuildTarget)"/>
  </Target>

  <Target Name="_BuildWin">
    <!-- Build "Xamarin Inspector.exe" -->
    <MSBuild
      BuildInParallel="true"
      Projects="Clients\Xamarin.Interactive.Client.Windows\Xamarin.Interactive.Client.Windows.csproj"
      Properties="$(MSBuildCommonProperties);ClientOutputPathSuffix=$(InspectorOutputPathSuffix);ClientAssemblyName=Xamarin Inspector;ClientDefineConstants=CLIENT_FLAVOR_INSPECTOR"
      Targets="$(InteractiveBuildTarget)"/>
    <!-- Build everything else -->
    <MSBuild
      BuildInParallel="true"
      Projects="$(SolutionToBuild)"
      Properties="$(SolutionProperties);$(MSBuildCommonProperties);ServerAddress=$(MacBuildHostAddress);ServerUser=$(MacBuildHostUser)"
      Targets="$(InteractiveBuildTarget)"/>
  </Target>

  <Target
    Condition="Exists('workbooks-proprietary\Build.proj')"
    Name="_BuildProprietary">
    <MSBuild
      Projects="workbooks-proprietary\Build.proj"
      Properties="$(SolutionProperties);$(MSBuildCommonProperties)"
      Targets="Build"/>
  </Target>

  <Target Name="_KillWrenchAdbServer">
    <Exec
      Command="$(WrenchAdb) kill-server"
      Condition="Exists('$(WrenchAdb)')"/>
  </Target>

  <Target Name="Rebuild">
    <CallTarget Targets="Clean;Build"/>
  </Target>

  <Target Name="Install">
    <CallTarget Targets="_InstallMac" Condition="'$(SolutionPlatform)' == 'macOS'"/>
    <CallTarget Targets="_InstallWin" Condition="'$(SolutionPlatform)' == 'Windows'"/>
  </Target>

  <Target Name="_InstallWin" DependsOnTargets="Xamarin_Build_ReadAllProperties">
    <PropertyGroup>
      <WixProject>Package\Windows\Xamarin.Interactive.Windows.Installer.wixproj</WixProject>

      <InstallerDefineConstants Condition="Exists('_build\$(Configuration)\WorkbookApps\iOS\Xamarin.Workbooks.iOS.app')">$(InstallerDefineConstants);iOSSupport</InstallerDefineConstants>
      <InstallerDefineConstants Condition="Exists('workbooks-proprietary\Build.proj')">$(InstallerDefineConstants);AndroidSupport</InstallerDefineConstants>

      <InstallerDefineConstants Condition="'$(InstallerDefineConstants)' != ''">$([MSBuild]::Escape($(InstallerDefineConstants.Substring(1))))</InstallerDefineConstants>
    </PropertyGroup>

    <Message
      Importance="high"
      Text="InstallerDefineConstants: $(InstallerDefineConstants)"/>

    <Exec Command="&quot;$(NuGet)&quot; restore &quot;$(WixProject)&quot;"/>

    <MSBuild
      BuildInParallel="true"
      Projects="$(WixProject)"
      Properties="$(MSBuildCommonProperties);BuildProjectReferences=false;InstallerDefineConstants=$(InstallerDefineConstants)"
      Targets="Build"/>
  </Target>

  <Target
    Name="Package"
    DependsOnTargets="_Bootstrap">
    <MakeDir Directories="$(PackageOutputDir)"/>
    <MSBuild
      Condition="'$(SolutionPlatform)' == 'macOS'"
      Projects="Clients\Xamarin.Interactive.Client.Mac\Xamarin.Interactive.Client.Mac.csproj"
      Targets="Package"
      Properties="Configuration=$(Configuration)"/>
    <CallTarget Targets="_PackageWin" Condition="'$(SolutionPlatform)' == 'Windows'"/>
    <Copy
      SkipUnchangedFiles="true"
      SourceFiles="$(UpdateInfoFile)"
      DestinationFolder="$(PackageOutputDir)"/>
    <Message Text="Generated $(PackageOutputDir)updateinfo" Importance="high"/>
    <Copy
      SkipUnchangedFiles="true"
      SourceFiles="$(BuildInfoDistFile)"
      DestinationFolder="$(PackageOutputDir)"/>
    <Message Text="Generated $(PackageOutputDir)buildinfo" Importance="high"/>
    <CallTarget Targets="PackageNuGet" Condition="'$(SolutionPlatform)' == 'macOS'"/>
    <CallTarget Targets="_PackageInspectorNuGetMac" Condition="'$(SolutionPlatform)' == 'macOS'"/>
    <CallTarget Targets="_PackageInspectorNuGetWin" Condition="'$(SolutionPlatform)' == 'Windows'"/>
    <CallTarget Targets="GenerateReleaseNotes" Condition="'$(SolutionPlatform)' == 'macOS'"/>
  </Target>

  <Target Name="_PackageWin" DependsOnTargets="Install;Xamarin_Build_ReadAllProperties;_PackagePdbs">
    <Copy
      SourceFiles="Package\Windows\bin\$(Configuration)\en-US\XamarinInteractive.msi"
      DestinationFiles="$(PackageOutputDir)XamarinInteractive-$(ReleaseVersion_SemVer).msi"/>
    <Message Text="Generated $(PackageOutputDir)XamarinInteractive-$(ReleaseVersion_SemVer).msi" Importance="high"/>
  </Target>

  <Target Name="PackageNuGet" DependsOnTargets="Xamarin_Build_ReadAllProperties">
    <PropertyGroup>
      <AgentPcl>$(MSBuildThisFileDirectory)Agents\Xamarin.Interactive\bin\$(Configuration)\netstandard2.0\Xamarin.Interactive.dll</AgentPcl>
      <StrippedPcl>$(MSBuildThisFileDirectory)Agents\Xamarin.Interactive\bin\$(Configuration)\netstandard2.0\Xamarin.Interactive.Stripped.dll</StrippedPcl>
    </PropertyGroup>
    <Exec Command="$(CILStrip) &quot;$(AgentPcl)&quot; &quot;$(StrippedPcl)&quot;"/>
    <Error Text="NuGet is not provisioned" Condition="!Exists('$(NuGet)')"/>
    <Exec Command="$(NuGet) pack Xamarin.Interactive.nuspec -Version $(WorkbooksIntegrationNuGetPackageVersion) -Properties Configuration=$(Configuration)" WorkingDirectory="Agents\Xamarin.Interactive" />
    <Copy
        SourceFiles="Agents\Xamarin.Interactive\Xamarin.Workbooks.Integration.$(WorkbooksIntegrationNuGetPackageVersion).nupkg"
        DestinationFiles="$(PackageOutputDir)\Xamarin.Workbooks.Integration.$(WorkbooksIntegrationNuGetPackageVersion).nupkg" />
  </Target>

  <Target Name="_PackageInspectorNuGetMac" DependsOnTargets="Xamarin_Build_ReadAllProperties">
    <!-- Copy completed Inspector.app bundle to staging area where Xamarin.Inspector.Mac.nupkg can be built later -->
    <MakeDir Directories="$(InspectorNuGetPackageContentDir)"/>
    <Exec Command="cp -a &quot;$(InspectorClientInstallPath)\$(InspectorAppBundleName)&quot; &quot;$(InspectorNuGetPackageContentDir)&quot;"/>

    <CallTarget Targets="_DoPackageInspectorNuGet"/>
  </Target>

  <Target Name="_PackageInspectorNuGetWin" DependsOnTargets="Xamarin_Build_ReadAllProperties">
    <PropertyGroup>
      <InspectorClientFilesPath>Clients\Xamarin.Interactive.Client.Windows\bin\$(Configuration)$(InspectorOutputPathSuffix)\</InspectorClientFilesPath>
      <!-- Add a parent folder since there's no app bundle like on Mac -->
      <InspectorNuGetPackageWindowsContentDir>$(InspectorNuGetPackageContentDir)\Xamarin.Inspector.Windows\</InspectorNuGetPackageWindowsContentDir>
    </PropertyGroup>
    <ItemGroup>
      <InspectorClientFiles
        Include="$(InspectorClientFilesPath)**\*"
        Exclude="$(InspectorClientFilesPath)*.pdb;$(InspectorClientFilesPath)*.xml"/>
    </ItemGroup>

    <Copy
      SkipUnchangedFiles="true"
      SourceFiles="@(InspectorClientFiles)"
      DestinationFolder="$(InspectorNuGetPackageWindowsContentDir)Client\%(RecursiveDir)"/>

    <Copy
      SkipUnchangedFiles="true"
      SourceFiles="@(AndroidAgentFiles)"
      DestinationFolder="$(InspectorNuGetPackageWindowsContentDir)Agents\Android"/>
    <Copy
      SkipUnchangedFiles="true"
      SourceFiles="@(iOSAgentFiles)"
      DestinationFolder="$(InspectorNuGetPackageWindowsContentDir)Agents\iOS"/>
    <Copy
      SkipUnchangedFiles="true"
      SourceFiles="@(WpfAgentFiles)"
      DestinationFolder="$(InspectorNuGetPackageWindowsContentDir)Agents\WPF"/>
    <Copy
      SkipUnchangedFiles="true"
      SourceFiles="@(AndroidFormsAgentFiles)"
      DestinationFolder="$(InspectorNuGetPackageWindowsContentDir)Agents\Forms\Android"/>
    <Copy
      SkipUnchangedFiles="true"
      SourceFiles="@(iOSFormsAgentFiles)"
      DestinationFolder="$(InspectorNuGetPackageWindowsContentDir)Agents\Forms\iOS"/>

    <CallTarget Targets="_DoPackageInspectorNuGet"/>
  </Target>

  <Target Name="_DoPackageInspectorNuGet" DependsOnTargets="Xamarin_Build_ReadAllProperties">
    <PropertyGroup>
      <InspectorPackageFileName>$(InspectorPackageName).$(ReleaseVersion_SemVerNuGetSafe).nupkg</InspectorPackageFileName>
    </PropertyGroup>

    <Error Text="NuGet is not provisioned" Condition="!Exists('$(NuGet)')"/>
    <Copy
      SkipUnchangedFiles="true"
      SourceFiles="$(InspectorPackageNuspec)"
      DestinationFolder="$(InspectorNuGetPackageBuildDir)"/>
    <!-- Use SemVerNuGetSafe to get versions in the form of x.y.z-beta1-build.123 instead of x.y.z-beta1+123.
         NuGet does not support reading build numbers from semver metadata. -->
    <Exec
      Command="&quot;$(NuGet)&quot; pack $(InspectorPackageName).nuspec -Version $(ReleaseVersion_SemVerNuGetSafe) -NoPackageAnalysis"
      WorkingDirectory="$(InspectorNuGetPackageBuildDir)"/>
    <Copy
      SourceFiles="$(InspectorNuGetPackageBuildDir)\$(InspectorPackageFileName)"
      DestinationFiles="$(PackageOutputDir)\$(InspectorPackageFileName)"/>
  </Target>

  <Target Name="_PackagePdbs" DependsOnTargets="Xamarin_Build_ReadAllProperties">
    <ItemGroup>
      <Pdbs Include="Agents\**\bin\$(Configuration)\**\*.pdb" />
      <Pdbs Include="Clients\**\bin\$(Configuration)\*.pdb" />
      <Pdbs Include="WorkbookApps\**\bin\$(Configuration)\*.pdb" />
      <Pdbs Include="Clients\Xamarin.Interactive.Client.Windows\bin\$(Configuration)$(InspectorOutputPathSuffix)\Xamarin Inspector.pdb" />
    </ItemGroup>
    <PropertyGroup>
      <PdbArchiveName>XamarinInteractive-$(ReleaseVersion_SemVer).msi.symbols.zip</PdbArchiveName>
      <SevenZipListFile>PdbList.lst</SevenZipListFile>
    </PropertyGroup>
    <WriteLinesToFile File="$(SevenZipListFile)" Lines="@(Pdbs)" Overwrite="true" Encoding="UTF-8" />
    <Exec Command="&quot;$(SevenZip)&quot; a $(PdbArchiveName) %40$(SevenZipListFile)" ConsoleToMSBuild="true" />
    <Copy SourceFiles="$(PdbArchiveName)" DestinationFiles="$(PackageOutputDir)$(PdbArchiveName)" />
  </Target>

  <Target Name="TestRegressions">
    <PropertyGroup Condition="'$(SolutionPlatform)' == 'macOS'">
      <TestDriver>Clients\Xamarin.Interactive.Client.Mac\bin\$(Configuration)\Xamarin Workbooks.app\Contents\MacOS\Xamarin Workbooks</TestDriver>
    </PropertyGroup>
    <PropertyGroup Condition="'$(SolutionPlatform)' == 'Windows'">
      <TestDriver>Clients\Xamarin.Interactive.Client.Windows\bin\$(Configuration)\Xamarin Workbooks.exe</TestDriver>
    </PropertyGroup>
    <PropertyGroup>
      <TestCommand Condition=" '$(TestToRun)' != '' ">-test:$(TestToRun)</TestCommand>
    </PropertyGroup>
    <MSBuild
      Projects="Tests\Xamarin.Interactive.Tests\Xamarin.Interactive.Tests.csproj"
      Properties="$(MSBuildCommonProperties)"
      Targets="Build"/>
    <Exec Command="&quot;$(TestDriver)&quot; cli test &quot;Tests\Xamarin.Interactive.Tests\bin\$(Configuration)\net461\Xamarin.Interactive.Tests.dll&quot; -result:&quot;$(MSBuildThisFileDirectory)Tests/Regressions.$(Configuration).xml&quot; $(TestCommand)"/>
  </Target>

  <Target
    Name="TestInspectorInjector"
    Condition="'$(SolutionPlatform)' == 'macOS'">
    <Exec Command="Tests/Xamarin.Interactive.Tests.InspectorSupport.Mac/bin/$(Configuration)/Xamarin.Interactive.Tests.InspectorSupport.Mac.app/Contents/MacOS/Xamarin.Interactive.Tests.InspectorSupport.Mac"/>
  </Target>

  <Target
    Name="TestInstaller"
    Condition="'$(SolutionPlatform)' == 'macOS'">
    <Exec Command="Tests\installer-upgrade-mac &quot;$(PackageOutputDir)XamarinInteractive-$(ReleaseVersion_SemVer).pkg&quot; &quot;$(ReleaseVersion_UpdateInfo)&quot; &quot;$(ReleaseVersion_AppleCFBundleVersion)&quot;"/>
  </Target>

  <ItemGroup>
    <LintAssemblies Include="@(AndroidAgentFiles)"/>
    <LintAssemblies Include="@(iOSAgentFiles)"/>
    <LintAssemblies Include="@(MacMobileAgentFiles)"/>
    <LintAssemblies Include="@(MacDesktopAgentFiles)"/>
  </ItemGroup>

  <Target Name="TestLint">
    <CallTarget Targets="_TestLintMac" Condition="'$(SolutionPlatform)' == 'macOS'"/>
  </Target>

  <Target Name="_TestLintMac">
    <Exec
      Condition="'%(Extension)' == '.dll'"
      Command="Tools\Xamarin.Interactive.Lint\bin\$(Configuration)\xilint.exe %(LintAssemblies.Identity)"/>
  </Target>

  <Target Name="UpdatePublicApiDefinitions">
    <MSBuild
      Projects="Tools\ApiDump\ApiDump.csproj;Agents\Xamarin.Interactive\Xamarin.Interactive.csproj"
      Properties="Configuration=Release"
      Targets="Build"/>
    <Exec Command="Tools\ApiDump\ApiDump.exe Agents\Xamarin.Interactive\bin\Release\netstandard2.0\Xamarin.Interactive.dll -o Agents\Xamarin.Interactive\API\Xamarin.Interactive.api.cs"/>
  </Target>

  <Target
    Name="UpdatePublicApiDocs"
    DependsOnTargets="UpdatePublicApiDefinitions">
    <Exec Command="mdoc update --delete Agents\Xamarin.Interactive\bin\Release\netstandard2.0\Xamarin.Interactive.dll -out Agents\Xamarin.Interactive\API\en -r /Library/Frameworks/Mono.framework/Versions/Current/lib/mono/4.5/Facades/netstandard.dll"/>
  </Target>

  <Target Name="AssemblePublicApiDocs">
    <Exec Command="mdoc assemble -o Agents\Xamarin.Interactive\API\interactive-api Agents\Xamarin.Interactive\API\en"/>
  </Target>

</Project>
